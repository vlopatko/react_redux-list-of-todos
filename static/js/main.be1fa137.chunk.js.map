{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","SET_QUERY","CLEAR_QUERY","SET_STATUS","REMOVE_FILTER","query","status","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoInfo","id","title","completed","dispatch","className","cn","onClick","currentTodoActions","TodoList","searchQuery","normalizedQuery","toLowerCase","trim","preparedTodos","normalizedTitle","includes","map","TodoFilter","defaultValue","onChange","event","filterActions","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","selectedTodo","find","useEffect","userId","undefined","href","email","name","App","listLoader","setListLoader","todosActions","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"mOAoBaA,EANG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAIED,EARM,iBAAyB,CAAEE,KAAM,uBA2BrCE,EAdY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,kBACH,OAAOI,EAAOH,QAChB,IAAK,qBACH,OAAO,KACT,QACE,OAAOE,ICnCPE,EAAY,mBACZC,EAAc,qBACdC,EAAa,oBACbC,EAAgB,gBA4CTV,EAdI,SAACW,GAAD,MAAmC,CAClDT,KAAMK,EACNJ,QAASQ,IAYEX,EATM,iBAAyB,CAC1CE,KAAMM,IAQKR,EALK,SAACY,GAAD,MAAsC,CACtDV,KAAMO,EACNN,QAASS,IAOLC,EAAe,CACnBF,MAAO,GACPC,OAAQ,OAwCKE,EA3BO,WAGT,IAFXT,EAEU,uDAFFQ,EACRP,EACU,uCACV,OAAQA,EAAOJ,MACb,KAAKK,EACH,MAAO,CACLK,OAAQP,EAAMO,OACdD,MAAOL,EAAOH,QAAQQ,OAE1B,KAAKH,EACH,MAAO,CACLI,OAAQP,EAAMO,OACdD,MAAO,IAEX,KAAKF,EACH,MAAO,CACLG,OAAQN,EAAOH,QAAQS,OACvBD,MAAON,EAAMM,OAEjB,KAAKD,EACH,OAAOG,EACT,QACE,OAAOR,IC3EPQ,EAAuB,GAGhBb,EARI,SAACe,GAAD,MAAoC,CACnDb,KAAM,YACNC,QAASY,IAsBIC,EAZM,WAGP,IAFZX,EAEW,uDAFHQ,EACRP,EACW,uCACX,MACO,cADCA,EAAOJ,KAEJI,EAAOH,QAEPE,GCrBPY,EAAcC,0BAAgB,CAClCC,YAAaf,EACbgB,OAAQN,EACRC,MAAOC,IAIIK,EAAQC,sBACnBL,EACAM,8BACEC,0BAAgBC,O,oCCfPC,EAAoCC,IACpCC,EAAkDC,I,uBCMlDC,EAAW,SAAC,GAAqB,IAAnB7B,EAAkB,EAAlBA,KAEvB8B,EAGE9B,EAHF8B,GACAC,EAEE/B,EAFF+B,MACAC,EACEhC,EADFgC,UAGIC,EAAWR,IACXP,EAAcS,GAAe,SAACvB,GAAD,OAAsBA,EAAMc,eAI/D,OACE,qBACE,UAAQ,OAERgB,UAAWC,IAAG,CACZ,6BAAwC,OAAXjB,QAAW,IAAXA,OAAA,EAAAA,EAAaY,MAAOA,IAJrD,UAOE,oBAAII,UAAU,eAAd,SAA8BJ,IAC7BE,EACC,oBAAIE,UAAU,eAAd,SACE,sBAAMA,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAIjB,oBAAIA,UAAU,iBAEhB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWC,IAAG,CACf,mBAAoBH,EACpB,mBAAoBA,IAFtB,SAKGD,MAGL,oBAAIG,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVjC,KAAK,SACLmC,QAAS,kBAlCKH,EAASI,EAA2BrC,KA8BpD,SAME,sBAAMkC,UAAU,OAAhB,SACE,mBAAGA,UAAWC,IAAG,MAAO,CACtB,UAAqB,OAAXjB,QAAW,IAAXA,OAAA,EAAAA,EAAaY,MAAOA,EAC9B,gBAA2B,OAAXZ,QAAW,IAAXA,OAAA,EAAAA,EAAaY,MAAOA,cAlCvCA,ICrBEQ,EAAW,WACtB,IAAMxB,EAAQa,GAAe,SAAAvB,GAAK,OAAIA,EAAMU,SAC5C,EAAuCa,GAAe,SAAAvB,GAAK,OAAIA,EAAMe,UAAtDoB,EAAf,EAAQ7B,MAAoBC,EAA5B,EAA4BA,OAEtB6B,EAAkBD,EAAYE,cAAcC,OAE5CC,EAAgB,YAAI7B,GACvBK,QAAO,SAACnB,GACP,IAAM4C,EAAkB5C,EAAK+B,MAAMU,cAAcC,OAEjD,OAAOH,GAAcK,EAAgBC,SAASL,MAE/CrB,QAAO,SAACnB,GACP,OAAQW,GACN,IAAK,SAAU,OAAQX,EAAKgC,UAC5B,IAAK,YAAa,OAAOhC,EAAKgC,UAC9B,QAAS,OAAOhC,MAItB,OACE,wBAAOkC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGS,EAAcG,KAAI,SAAA9C,GAAI,OACrB,cAAC,EAAD,CAAUA,KAAMA,GAAWA,EAAK8B,aCtC7BiB,EAAa,WACxB,IAAM5B,EAASQ,GAAe,SAAAvB,GAAK,OAAIA,EAAMe,UAEvCc,EAAWR,IAEjB,OACE,uBAAMS,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRc,aAAc7B,EAAOR,OACrBsC,SAAU,SAACC,GAAD,OAAWjB,EAASkB,EAAwB,CACpDxC,OAAQuC,EAAME,OAAOC,UAJzB,UAOE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGnB,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRjC,KAAK,SACLoD,MAAOlC,EAAOT,MACdwB,UAAU,QACVoB,YAAY,YACZL,SAAU,SAACC,GAAD,OAAWjB,EAASkB,EAAuB,CACnDzC,MAAOwC,EAAME,OAAOC,YAGxB,sBAAMnB,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAEdf,EAAOT,OACN,sBAAMwB,UAAU,gBAAgBqB,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACRvD,KAAK,SACLiC,UAAU,SACVE,QAAS,kBAAMH,EAASkB,iBC5CzBM,G,MAAmB,kBAC9B,qBAAKvB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCOnB,SAASwB,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICZMC,EAAY,WACvB,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KAEMtD,EAAcS,GAAe,SAACvB,GAAD,OAAsBA,EAAMc,eACzDJ,EAAQa,GAAe,SAACvB,GAAD,OAAsBA,EAAMU,SAEnDmB,EAAWR,IAEXgD,EAAe3D,EAAM4D,MAAK,SAAC1E,GAC/B,OAAOA,EAAK8B,MAAL,OAAYZ,QAAZ,IAAYA,OAAZ,EAAYA,EAAaY,OAWlC,OAPA6C,qBAAU,WDCW,IAACC,ECAhBH,IDAgBG,ECCVH,EAAaG,ODDgBlB,EAAG,iBAAiBkB,KCEtDX,KAAKO,KAET,QAACtD,QAAD,IAACA,OAAD,EAACA,EAAaY,KAGf,sBAAKI,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,sBAEbqC,GAAD,OAASrD,QAAT,IAASA,KAAaY,GACrB,cAAC,EAAD,IAEA,sBAAKI,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,gCAIYuC,QAJZ,IAIYA,OAJZ,EAIYA,EAAc3C,MAI1B,wBACE7B,KAAK,SACLiC,UAAU,SACV,UAAQ,cACRE,QAAS,WACPoC,OAAQK,GA/BG5C,EAASI,WAqC1B,sBAAKH,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACGuC,QADH,IACGA,OADH,EACGA,EAAc1C,QAGjB,oBAAGG,UAAU,QAAQ,UAAQ,aAA7B,UACe,OAAZuC,QAAY,IAAZA,KAAczC,UACb,wBAAQE,UAAU,mBAAlB,kBAEA,wBAAQA,UAAU,kBAAlB,qBAGD,OACAqC,GACC,mBAAGO,KAAI,iBAAYP,EAAKQ,OAAxB,SACGR,EAAKS,oBC5DXC,EAAgB,WAC3B,MAAoCX,oBAAS,GAA7C,mBAAOY,EAAP,KAAmBC,EAAnB,KAEMjE,EAAcS,GAAe,SAAAvB,GAAK,OAAIA,EAAMc,eAC5Ce,EAAWR,IAUjB,OARAkD,qBAAU,WACRQ,GAAc,GFEYzB,EAAY,UECnCO,MAAK,SAAAE,GAAG,OAAIlC,EAASmD,EAAsBjB,OAC3CkB,SAAQ,kBAAMF,GAAc,QAC9B,IAGD,qCACE,qBAAKjD,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,sBAAKA,UAAU,QAAf,UACGgD,GAAc,cAAC,EAAD,IACf,cAAC,EAAD,eAMI,OAAXhE,QAAW,IAAXA,OAAA,EAAAA,EAAaY,KAAM,cAAC,EAAD,QCpCpBwD,EAAO,kBACX,cAAC,IAAD,CAAUlE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKNmE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.be1fa137.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","const SET_QUERY = 'filter/SET_QUERY';\nconst CLEAR_QUERY = 'filter/CLEAR_QUERY';\nconst SET_STATUS = 'filter/SET_STATUS';\nconst REMOVE_FILTER = 'filter/REMOVE';\n\ntype RemoveFilterAction = {\n  type: typeof REMOVE_FILTER,\n};\n\ntype Query = {\n  query: string,\n};\n\ntype Status = {\n  status: 'all' | 'completed' | 'active',\n};\n\ntype SetQueryAction = {\n  type: typeof SET_QUERY,\n  payload: Query,\n};\ntype ClearQueryAction = {\n  type: typeof CLEAR_QUERY,\n};\ntype SetStatusAction = {\n  type: typeof SET_STATUS,\n  payload: Status,\n};\n\nconst removeFilter = (): RemoveFilterAction => ({\n  type: REMOVE_FILTER,\n});\n\nconst setQuery = (query: Query): SetQueryAction => ({\n  type: SET_QUERY,\n  payload: query,\n});\n\nconst clearQuery = (): ClearQueryAction => ({\n  type: CLEAR_QUERY,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: SET_STATUS,\n  payload: status,\n});\n\nexport const actions = {\n  setQuery, clearQuery, setStatus, removeFilter,\n};\n\nconst initialState = {\n  query: '',\n  status: 'all',\n};\n\ntype Action = SetQueryAction\n| ClearQueryAction\n| SetStatusAction\n| RemoveFilterAction;\n\ntype State = {\n  query: string,\n  status: string,\n};\n\nconst filterReducer = (\n  state = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case SET_QUERY:\n      return {\n        status: state.status,\n        query: action.payload.query,\n      };\n    case CLEAR_QUERY:\n      return {\n        status: state.status,\n        query: '',\n      };\n    case SET_STATUS:\n      return {\n        status: action.payload.status,\n        query: state.query,\n      };\n    case REMOVE_FILTER:\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\n// payload is a typical name for an action data\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\n// Action creator return type protect us from a mistype\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nconst initialState: Todo[] = [];\n\n// These actions will be used in the application\nexport const actions = { setTodos };\n\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state = initialState,\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { RootState } from '../../app/store';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo = ({ todo }: Props) => {\n  const {\n    id,\n    title,\n    completed,\n  } = todo;\n\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector((state: RootState) => state.currentTodo);\n\n  const setTodo = () => dispatch(currentTodoActions.setTodo(todo));\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      key={id}\n      className={cn({\n        'has-background-info-light': currentTodo?.id === id,\n      })}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      {completed ? (\n        <td className=\"is-vcentered\">\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </td>\n      ) : (\n        <td className=\"is-vcentered\" />\n      )}\n      <td className=\"is-vcentered is-expanded\">\n        <p className={cn({\n          'has-text-danger': !completed,\n          'has-text-success': completed,\n        })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => setTodo()}\n        >\n          <span className=\"icon\">\n            <i className={cn('far', {\n              'fa-eye': currentTodo?.id !== id,\n              'fa-eye-slash': currentTodo?.id === id,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import { useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\nexport const TodoList = () => {\n  const todos = useAppSelector(state => state.todos) as Todo[];\n  const { query: searchQuery, status } = useAppSelector(state => state.filter);\n\n  const normalizedQuery = searchQuery.toLowerCase().trim();\n\n  const preparedTodos = [...todos]\n    .filter((todo) => {\n      const normalizedTitle = todo.title.toLowerCase().trim();\n\n      return searchQuery ? normalizedTitle.includes(normalizedQuery) : true;\n    })\n    .filter((todo) => {\n      switch (status) {\n        case 'active': return !todo.completed;\n        case 'completed': return todo.completed;\n        default: return todo;\n      }\n    });\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {preparedTodos.map(todo => (\n          <TodoInfo todo={todo} key={todo.id} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter = () => {\n  const filter = useAppSelector(state => state.filter);\n\n  const dispatch = useAppDispatch();\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            defaultValue={filter.status}\n            onChange={(event) => dispatch(filterActions.setStatus({\n              status: event.target.value as 'all' | 'completed' | 'active',\n            }))}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"search\"\n          value={filter.query}\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={(event) => dispatch(filterActions.setQuery({\n            query: event.target.value,\n          }))}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {filter.query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.clearQuery())}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { RootState } from '../../app/store';\n\nexport const TodoModal = () => {\n  const [user, setUser] = useState<User | undefined>();\n\n  const currentTodo = useAppSelector((state: RootState) => state.currentTodo);\n  const todos = useAppSelector((state: RootState) => state.todos) as Todo[];\n\n  const dispatch = useAppDispatch();\n\n  const selectedTodo = todos.find((todo: Todo) => {\n    return todo.id === currentTodo?.id;\n  });\n  const removeTodo = () => dispatch(currentTodoActions.removeTodo());\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then(setUser);\n    }\n  }, [currentTodo?.id]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user && currentTodo?.id ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                setUser(undefined);\n                removeTodo();\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n              {user && (\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [listLoader, setListLoader] = useState(false);\n\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    setListLoader(true);\n\n    getTodos()\n      .then(res => dispatch(todosActions.setTodos(res)))\n      .finally(() => setListLoader(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {listLoader && <Loader />}\n              <TodoList />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo?.id && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}